'use strict';

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

try {
    fs.mkdirSync('./app');
} catch (error) {
    console.error('Error al crear ./app');
}

try {
    fs.mkdirSync('./app/src/');
} catch (error) {
    console.error('Error al crear ./app/src/');
}
try {
    fs.mkdirSync('./app/src/app');
} catch (error) {
    console.error('Error al crear ./app/src/app');
}
try {
    fs.mkdirSync('./app/lib/');
} catch (error) {
    console.error('Error al crear ./app/lib/');
}

var structureClass = '\nimport { <Name> } from \'<name>\'\n\nclass <Name> {\n    constructor(){\n\n    }\n}\n\nexport { <Name> };\n';

var gitignoreClass = '\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of \'npm pack\'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n';

try {
    fs.writeFileSync('./app/src/app/app.js', structureClass);
} catch (error) {
    console.error('Error al crear modulo');
}

try {
    fs.writeFileSync('./app/.gitignore', gitignoreClass);
} catch (error) {
    console.error('Error', error);
}