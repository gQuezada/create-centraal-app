import * as fs from 'fs';

const init = (projectName)=>{
    try {
        fs.mkdirSync(`./${projectName}/`);
    }
    catch(error) {
        console.error(`Error al crear./${projectName}`);
    }
    
    try {
        fs.mkdirSync(`./${projectName}/src/`);
    }
    catch(error) {
        console.error(`Error al crear ./${projectName}/src/`);
    }
    try {
        fs.mkdirSync(`./${projectName}/src/${projectName}`);
    }
    catch(error) {
        console.error(`Error al crear ./${projectName}/src/${projectName}`);
    }
    try {
        fs.mkdirSync(`./${projectName}/lib/`);
    }
    catch(error) {
        console.error(`Error al crear ./${projectName}/lib/`);
    }
    
    let structureClass = `
    import { ${projectName} } from '${projectName}'
    
    class ${projectName} {
        constructor(){
    
        }
    }
    
    export { ${projectName} };
    `;
    
    let gitignoreClass=`
    /lib/
    # Logs
    logs
    *.log
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    
    # Runtime data
    pids
    *.pid
    *.seed
    *.pid.lock
    
    # Directory for instrumented libs generated by jscoverage/JSCover
    lib-cov
    
    # Coverage directory used by tools like istanbul
    coverage
    
    # nyc test coverage
    .nyc_output
    
    # Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
    .grunt
    
    # Bower dependency directory (https://bower.io/)
    bower_components
    
    # node-waf configuration
    .lock-wscript
    
    # Compiled binary addons (https://nodejs.org/api/addons.html)
    build/Release
    
    # Dependency directories
    node_modules/
    jspm_packages/
    
    # TypeScript v1 declaration files
    typings/
    
    # Optional npm cache directory
    .npm
    
    # Optional eslint cache
    .eslintcache
    
    # Optional REPL history
    .node_repl_history
    
    # Output of 'npm pack'
    *.tgz
    
    # Yarn Integrity file
    .yarn-integrity
    
    # dotenv environment variables file
    .env
    
    # next.js build output
    .next
    `;
    
    try {
        fs.writeFileSync(`./${projectName}/src/${projectName}/${projectName}.js`, structureClass);
    }
    catch(error) {
        console.error('Error al crear modulo');
    }
    
    try {
        fs.writeFileSync(`./${projectName}/.gitignore`, gitignoreClass);
    }
    catch(error) {
        console.error('Error', error);
    }
};

const generate = (moduleName)=>{
    
    try {
        fs.mkdirSync(`./src/${moduleName}`);
    }
    catch(error) {
        console.error(`Error al crear ./src/${moduleName}`);
    }
    
    let structureClass = `
    import { ${moduleName} } from '${moduleName}'
    
    class ${moduleName} {
        constructor(){
    
        }
    }
    
    export { ${moduleName} };
    `;
    
    try {
        fs.writeFileSync(`./src/${moduleName}/${moduleName}.js`, structureClass);
    }
    catch(error) {
        console.error('Error al crear modulo');
    }
};

export {init, generate};